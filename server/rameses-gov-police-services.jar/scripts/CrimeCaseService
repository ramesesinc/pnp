import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;

class CrimeCaseService extends ActiveCrudService
{
	@ActiveDB(value='crimecase', em='police')
	def em

	@Service("DateService")
	def dtSvc;

	@Service("SequenceService")
	def seqSvc;
	
	void beforeCreate( entity ) {
		validate( entity );
		def dtcurrent = dtSvc.parseCurrentDate();
		def prefix = "CRIMECASE" + dtcurrent.year;
		entity.caseno = dtcurrent.year + seqSvc.getNextFormattedSeries( prefix )
		entity.casedate = formatDate( dtcurrent.date );
	}

	void beforeRemoveEntity( entity ) {
		em.deleteCrimeCaseCrimes( [crimecaseid:entity.objid] );
		deleteRespondent( entity.respondents );
	}

	void validate( entity ) {
		if( ! entity.crimes ) throw new Exception( 'Please specify atleast one crime.' )
		if( ! entity.respondents ) throw new Exception( 'Please specify atleast one respondent.' )

	}

	void afterCreate( entity ) {
		createCrime( entity.crimes );
		createRespondent( entity.respondents );		
	}

	void createCrime( crimes ) {
		crimes?.each {
			em.insertCrimeCaseCrime( it );
		}
	}

	void createRespondent( respondents ) {
		respondents?.each { r->
			r.respondentcrimes?.each { rc->
				em.insertCrimeCaseRespondentCrime( rc );
			}
			
			em.insertCrimeCaseRespondent( r );
		}
	}

	void deleteRespondent( respondents ) {
		respondents?.each { it->
			em.deleteCrimeCaseRespondentCrimes( [crimecaserespondentid:it.objid] );
			em.deleteCrimeCaseRespondent( [objid:it.objid] );
		}
	}
	
	void beforeUpdate( entity ) {
		validate( entity );
	}

	void afterUpdate( entity ) {
		updateCrime( entity );
		updateRespondent( entity );
	}

	void updateCrime( entity ) {
		def oldCrimes = em.getCrimeCaseCrimes( [crimecaseid:entity.objid] );
		def deletedCrimes = oldCrimes - entity.crimes;
		def newCrimes = entity.crimes - oldCrimes;

		deletedCrimes.each {
			em.deleteCrimeCaseCrime( [objid:it.objid] );
		}

		createCrime( newCrimes );
	}

	void updateRespondent( entity ) {
		deleteRespondent( entity._deletedRespondents );

		entity._editedRespondents?.each { r->
			r.respondentcrimes?.each { rc->
				em.updateCrimeCaseRespondentCrime( rc );
			}
			
			r._deletedRespondentCrimes?.each { rc->				
				em.deleteCrimeCaseRespondentCrime( [objid:rc.objid] );
			}
			
			r._newRespondentCrimes?.each { rc->
				em.insertCrimeCaseRespondentCrime( rc );
			}
		}

		createRespondent( entity._newRespondents );
	}
	
	void afterOpen( entity ) {
		entity.casedate = formatDate( entity.casedate );
		entity.crimes = em.getCrimeCaseCrimes( [crimecaseid:entity.objid] );
		entity.respondents = getRespondents( entity.objid );
	}

	def getRespondents( crimecaseid ) {
		def respondents = em.getCrimeCaseRespondents( [crimecaseid:crimecaseid] );
				
		respondents?.each {
			it.respondentcrimes = em.getCrimeCaseRespondentCrimes( [crimecaserespondentid:it.objid] );

			def crimeparticipationinfo = '';
			it.respondentcrimes?.each { rc->
				crimeparticipationinfo = crimeparticipationinfo + rc.title + " ( " + rc.participation + " ), ";
			}	

			it.crimeparticipationinfo = crimeparticipationinfo;
		}

		return respondents;
	}

	def formatDate( dt ) {
		def sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format( dt );
	}
}
